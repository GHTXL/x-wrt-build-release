#=================================================
#   Description: Build X-WRT using GitHub Actions
#   Lisence: MIT
#   Author: ptpt52
#=================================================

name: Build Jobs 24.04_b202411071136

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-20.04
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        name: X-WRT ${{ github.ref_name }}
        draft: false
        allowUpdates: true
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v4
      with:
        name: release_url
        path: release_url.txt
  build-ath79-generic_ath79-generic-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-generic ath79-generic-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ath79-generic_ath79-generic-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ath79-generic
      id: asset-83799ba513ec8a948fd13bd7e87480bf
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ath79-generic.zip
        asset_name: x-wrt-24.04_b202411071136-ath79-generic.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ath79-generic-nosymbol
      id: asset-223d85cd8d31f2adbdbb0d03775b2afa
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ath79-generic-nosymbol.zip
        asset_name: x-wrt-24.04_b202411071136-ath79-generic-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ath79-nand:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-nand" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ath79-nand
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ath79-nand
      id: asset-d38f43c4a63ea242e679a4cd0780ab32
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ath79-nand.zip
        asset_name: x-wrt-24.04_b202411071136-ath79-nand.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq40xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq40xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ipq40xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ipq40xx-generic
      id: asset-d83173d3446ec3f1a42edd0fcf154446
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ipq40xx-generic.zip
        asset_name: x-wrt-24.04_b202411071136-ipq40xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2709:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2709" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2709
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-bcm27xx-bcm2709
      id: asset-8ea7280f2dd93ca95ee0f11e67b595f6
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-bcm27xx-bcm2709.zip
        asset_name: x-wrt-24.04_b202411071136-bcm27xx-bcm2709.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2710:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2710" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2710
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-bcm27xx-bcm2710
      id: asset-aa8278189aa38be3a4fa6094efb131fd
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-bcm27xx-bcm2710.zip
        asset_name: x-wrt-24.04_b202411071136-bcm27xx-bcm2710.zip
        asset_content_type: application/zip
        overwrite: true
  build-mediatek-mt7622:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-mt7622" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-mediatek-mt7622
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-mediatek-mt7622
      id: asset-66c6eb808b7950920e40daea89e7316a
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-mediatek-mt7622.zip
        asset_name: x-wrt-24.04_b202411071136-mediatek-mt7622.zip
        asset_content_type: application/zip
        overwrite: true
  build-mediatek-filogic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-filogic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-mediatek-filogic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-mediatek-filogic
      id: asset-4483a7117440e2ae855f707d98735c35
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-mediatek-filogic.zip
        asset_name: x-wrt-24.04_b202411071136-mediatek-filogic.zip
        asset_content_type: application/zip
        overwrite: true
  build-mediatek-filogic-uncommon:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-filogic-uncommon" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-mediatek-filogic-uncommon
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-mediatek-filogic-uncommon
      id: asset-01ce3ab8f7c6ecbebd07bc5d8244b6db
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-mediatek-filogic-uncommon.zip
        asset_name: x-wrt-24.04_b202411071136-mediatek-filogic-uncommon.zip
        asset_content_type: application/zip
        overwrite: true
  build-qualcommax-ipq807x_qualcommax-ipq60xx:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="qualcommax-ipq807x qualcommax-ipq60xx" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-qualcommax-ipq807x_qualcommax-ipq60xx
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-qualcommax-ipq807x
      id: asset-a56fd89f30ee7d774ee6c7fc0305d0ce
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-qualcommax-ipq807x.zip
        asset_name: x-wrt-24.04_b202411071136-qualcommax-ipq807x.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-qualcommax-ipq60xx
      id: asset-705989e6ad934d3846a755d80e3cece6
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-qualcommax-ipq60xx.zip
        asset_name: x-wrt-24.04_b202411071136-qualcommax-ipq60xx.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2711:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2711" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2711
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-bcm27xx-bcm2711
      id: asset-ecb71c05683e76c92135364a0f78bbb2
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-bcm27xx-bcm2711.zip
        asset_name: x-wrt-24.04_b202411071136-bcm27xx-bcm2711.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2712:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2712" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2712
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-bcm27xx-bcm2712
      id: asset-73a05a8dc4a21c195de3ff83ec181bc5
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-bcm27xx-bcm2712.zip
        asset_name: x-wrt-24.04_b202411071136-bcm27xx-bcm2712.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm53xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm53xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-bcm53xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-bcm53xx-generic
      id: asset-5c74bfa9e0531ef2dd49258676835b82
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-bcm53xx-generic.zip
        asset_name: x-wrt-24.04_b202411071136-bcm53xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq806x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq806x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ipq806x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ipq806x-generic
      id: asset-dab625b5b86e29eb829806ba893da598
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ipq806x-generic.zip
        asset_name: x-wrt-24.04_b202411071136-ipq806x-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-kirkwood-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="kirkwood-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-kirkwood-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-kirkwood-generic
      id: asset-5970275d4c66f5edf2971d48c0eb6ba8
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-kirkwood-generic.zip
        asset_name: x-wrt-24.04_b202411071136-kirkwood-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-mvebu-cortexa9:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mvebu-cortexa9" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-mvebu-cortexa9
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-mvebu-cortexa9
      id: asset-66c9f916877f4b68597173eddbb34cb6
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-mvebu-cortexa9.zip
        asset_name: x-wrt-24.04_b202411071136-mvebu-cortexa9.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7620_ramips-mt7620-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7620 ramips-mt7620-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ramips-mt7620_ramips-mt7620-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt7620
      id: asset-9cfa33cc7b0c0fb9cdd2042e417732d6
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt7620.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt7620.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt7620-nosymbol
      id: asset-a8ed95f82eac74e50295ae8284db995a
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt7620-nosymbol.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt7620-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7621_ramips-mt7621-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7621 ramips-mt7621-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ramips-mt7621_ramips-mt7621-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt7621
      id: asset-12bc3d364024eb10619c4b99601493c2
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt7621.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt7621.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt7621-nosymbol
      id: asset-2a545d6a1910d6c839b7a2b8e8fe3723
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt7621-nosymbol.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt7621-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt76x8_ramips-mt76x8-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt76x8 ramips-mt76x8-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-ramips-mt76x8_ramips-mt76x8-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt76x8
      id: asset-35a4ddf8d77cbfd9abaa9496675b4c3a
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt76x8.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt76x8.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-ramips-mt76x8-nosymbol
      id: asset-3616f1e7bc3acaf05cec2724429f0edc
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-ramips-mt76x8-nosymbol.zip
        asset_name: x-wrt-24.04_b202411071136-ramips-mt76x8-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-rockchip-armv8_armsr-armv8:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="rockchip-armv8 armsr-armv8" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-rockchip-armv8_armsr-armv8
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-rockchip-armv8
      id: asset-e1b19a9ea242865900b296a5cf4b11d4
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-rockchip-armv8.zip
        asset_name: x-wrt-24.04_b202411071136-rockchip-armv8.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-24.04_b202411071136-armsr-armv8
      id: asset-1eaba9f2375238e32711f5426d9a5cad
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-armsr-armv8.zip
        asset_name: x-wrt-24.04_b202411071136-armsr-armv8.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-x86_64
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-x86_64
      id: asset-e793b9b8fd5fc864097c19516e399724
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-x86_64.zip
        asset_name: x-wrt-24.04_b202411071136-x86_64.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64-docker:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Pre Initialization environment
      run: |
        docker rmi `docker images -q`
        sudo -E df -h
        sudo ls -lh /mnt
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: |
        sudo -E mkdir /mnt/work
        sudo -E chmod 777 /mnt/work
        git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git /mnt/work/x-wrt
    - name: Update feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd /mnt/work/x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh /mnt/work/x-wrt/
        cp release.tag /mnt/work/x-wrt/
        cd /mnt/work/x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64-docker" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-failure-log-x86_64-docker
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-24.04_b202411071136-x86_64-docker
      id: asset-c7191ef2a806b97a4be99a1a1c8e4fb6
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: /mnt/work/x-wrt/x-wrt-24.04_b202411071136-x86_64-docker.zip
        asset_name: x-wrt-24.04_b202411071136-x86_64-docker.zip
        asset_content_type: application/zip
        overwrite: true
