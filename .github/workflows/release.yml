#=================================================
#   Description: Build X-WRT using GitHub Actions
#   Lisence: MIT
#   Author: ptpt52
#=================================================

name: Build Jobs 23.10_b202311252359

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-20.04
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        name: X-WRT ${{ github.ref_name }}
        draft: false
        allowUpdates: true
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v3
      with:
        name: release_url
        path: release_url.txt
  build-ath79-generic_ath79-generic-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-generic ath79-generic-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ath79-generic_ath79-generic-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ath79-generic
      id: asset-781fbff97c4481f9937f4656b44f4cc9
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ath79-generic.zip
        asset_name: x-wrt-23.10_b202311252359-ath79-generic.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ath79-generic-nosymbol
      id: asset-1d358d92e530954d9c2d014922116391
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ath79-generic-nosymbol.zip
        asset_name: x-wrt-23.10_b202311252359-ath79-generic-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ath79-nand:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-nand" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ath79-nand
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ath79-nand
      id: asset-18faeaf8186cf75314c2fab08a63b5e3
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ath79-nand.zip
        asset_name: x-wrt-23.10_b202311252359-ath79-nand.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq40xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq40xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ipq40xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ipq40xx-generic
      id: asset-03d323169eaf43e74a7443eea4ad4048
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ipq40xx-generic.zip
        asset_name: x-wrt-23.10_b202311252359-ipq40xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2709_sunxi-cortexa7:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2709 sunxi-cortexa7" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2709_sunxi-cortexa7
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-bcm27xx-bcm2709
      id: asset-d4936a1d5a02ca6bcd865a9d39752da3
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-bcm27xx-bcm2709.zip
        asset_name: x-wrt-23.10_b202311252359-bcm27xx-bcm2709.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-sunxi-cortexa7
      id: asset-abc0e2d2b3fee698bc28ccd63dacdef7
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-sunxi-cortexa7.zip
        asset_name: x-wrt-23.10_b202311252359-sunxi-cortexa7.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2710:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2710" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2710
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-bcm27xx-bcm2710
      id: asset-6d229ef81796fdaadae31619f112e295
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-bcm27xx-bcm2710.zip
        asset_name: x-wrt-23.10_b202311252359-bcm27xx-bcm2710.zip
        asset_content_type: application/zip
        overwrite: true
  build-mediatek-mt7622_mediatek-filogic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-mt7622 mediatek-filogic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-mediatek-mt7622_mediatek-filogic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-mediatek-mt7622
      id: asset-76a51c5a5a40487a467aa93b912d9df0
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-mediatek-mt7622.zip
        asset_name: x-wrt-23.10_b202311252359-mediatek-mt7622.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-mediatek-filogic
      id: asset-0d105aa0bfd9036c8bebb412eced2232
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-mediatek-filogic.zip
        asset_name: x-wrt-23.10_b202311252359-mediatek-filogic.zip
        asset_content_type: application/zip
        overwrite: true
  build-qualcommax-ipq807x:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="qualcommax-ipq807x" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-qualcommax-ipq807x
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-qualcommax-ipq807x
      id: asset-f73e375c90444ffa39bd40df16a5a995
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-qualcommax-ipq807x.zip
        asset_name: x-wrt-23.10_b202311252359-qualcommax-ipq807x.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2711:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2711" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2711
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-bcm27xx-bcm2711
      id: asset-7d8c241ee743c40b5262b7804ef2e4ac
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-bcm27xx-bcm2711.zip
        asset_name: x-wrt-23.10_b202311252359-bcm27xx-bcm2711.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm53xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm53xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm53xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-bcm53xx-generic
      id: asset-e09c54a798ab6c771c9ef47b62133122
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-bcm53xx-generic.zip
        asset_name: x-wrt-23.10_b202311252359-bcm53xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq806x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq806x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ipq806x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ipq806x-generic
      id: asset-2205d0db0110541d8f3c154aa8b1374e
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ipq806x-generic.zip
        asset_name: x-wrt-23.10_b202311252359-ipq806x-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-kirkwood-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="kirkwood-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-kirkwood-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-kirkwood-generic
      id: asset-ab69213f22c71093927c3de61fc7f667
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-kirkwood-generic.zip
        asset_name: x-wrt-23.10_b202311252359-kirkwood-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-mvebu-cortexa9:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mvebu-cortexa9" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-mvebu-cortexa9
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-mvebu-cortexa9
      id: asset-71a22f43e7c4028e333a17cf6fce8792
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-mvebu-cortexa9.zip
        asset_name: x-wrt-23.10_b202311252359-mvebu-cortexa9.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7620_ramips-mt7620-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7620 ramips-mt7620-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt7620_ramips-mt7620-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt7620
      id: asset-6b019e7dca86368bd48abffc30c0f717
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt7620.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt7620.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt7620-nosymbol
      id: asset-656fd10fa0b6e1141ec2dd9608239a12
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt7620-nosymbol.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt7620-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7621_ramips-mt7621-ext4fs:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7621 ramips-mt7621-ext4fs" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt7621_ramips-mt7621-ext4fs
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt7621
      id: asset-e2915ed8734a2bb664b397ece3cc2c31
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt7621.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt7621.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt7621-ext4fs
      id: asset-ee639b8330f4daf5bfd162c403e106df
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt7621-ext4fs.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt7621-ext4fs.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt76x8_ramips-mt76x8-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt76x8 ramips-mt76x8-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt76x8_ramips-mt76x8-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt76x8
      id: asset-3d759f79aaac690e8562221056e2f51a
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt76x8.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt76x8.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-ramips-mt76x8-nosymbol
      id: asset-42727e4b664494707f7429896bb24a1f
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-ramips-mt76x8-nosymbol.zip
        asset_name: x-wrt-23.10_b202311252359-ramips-mt76x8-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-rockchip-armv8_armsr-armv8:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="rockchip-armv8 armsr-armv8" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-rockchip-armv8_armsr-armv8
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-rockchip-armv8
      id: asset-a141d32ae472699f2f77539329ee2999
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-rockchip-armv8.zip
        asset_name: x-wrt-23.10_b202311252359-rockchip-armv8.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.10_b202311252359-armsr-armv8
      id: asset-96a282bd684ebb9836cf9c33c03b56c8
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-armsr-armv8.zip
        asset_name: x-wrt-23.10_b202311252359-armsr-armv8.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-x86_64
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-x86_64
      id: asset-5790ce0e8307adf8a5d96496c5fb9071
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-x86_64.zip
        asset_name: x-wrt-23.10_b202311252359-x86_64.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64-docker:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata python3-pyelftools python3-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clean up disk
      run: sudo rm -rf /opt/*
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64-docker" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-x86_64-docker
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.10_b202311252359-x86_64-docker
      id: asset-974ada324565477e25f0c9c4ec60ef42
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.10_b202311252359-x86_64-docker.zip
        asset_name: x-wrt-23.10_b202311252359-x86_64-docker.zip
        asset_content_type: application/zip
        overwrite: true
