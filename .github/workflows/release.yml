#=================================================
#   Description: Build X-WRT using GitHub Actions
#   Lisence: MIT
#   Author: ptpt52
#=================================================

name: Build Jobs 23.04_b202306012030

on:
  push:
    tags:
    - 'v*'

jobs:
  release:
    name: Create Github Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-20.04
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.WORKFLOW_TOKEN }}
        name: X-WRT ${{ github.ref_name }}
        draft: false
        allowUpdates: true
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v3
      with:
        name: release_url
        path: release_url.txt
  build-ath79-generic_ath79-generic-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-generic ath79-generic-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ath79-generic_ath79-generic-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ath79-generic
      id: asset-785428a42f4e32683a8fd462f368a57e
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ath79-generic.zip
        asset_name: x-wrt-23.04_b202306012030-ath79-generic.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ath79-generic-nosymbol
      id: asset-431c71c53b3da0b4e93214c41a120290
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ath79-generic-nosymbol.zip
        asset_name: x-wrt-23.04_b202306012030-ath79-generic-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ath79-nand:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ath79-nand" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ath79-nand
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ath79-nand
      id: asset-12b56837d8ce3650429fe187736fd81d
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ath79-nand.zip
        asset_name: x-wrt-23.04_b202306012030-ath79-nand.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq40xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq40xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ipq40xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ipq40xx-generic
      id: asset-322ae979d1e8f73775dc2ccee7386380
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ipq40xx-generic.zip
        asset_name: x-wrt-23.04_b202306012030-ipq40xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2709_sunxi-cortexa7:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2709 sunxi-cortexa7" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2709_sunxi-cortexa7
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-bcm27xx-bcm2709
      id: asset-9e23f7f7095c938175a53ddae9b88c6f
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-bcm27xx-bcm2709.zip
        asset_name: x-wrt-23.04_b202306012030-bcm27xx-bcm2709.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-sunxi-cortexa7
      id: asset-c7c61795b7c9af5d0f0ae709e303e19a
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-sunxi-cortexa7.zip
        asset_name: x-wrt-23.04_b202306012030-sunxi-cortexa7.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2710:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2710" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2710
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-bcm27xx-bcm2710
      id: asset-635e20dd418a8f6f2c99dafd138d29be
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-bcm27xx-bcm2710.zip
        asset_name: x-wrt-23.04_b202306012030-bcm27xx-bcm2710.zip
        asset_content_type: application/zip
        overwrite: true
  build-mediatek-mt7622_mediatek-filogic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mediatek-mt7622 mediatek-filogic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-mediatek-mt7622_mediatek-filogic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-mediatek-mt7622
      id: asset-d10da84de1c4347059abe6ea6d023ecb
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-mediatek-mt7622.zip
        asset_name: x-wrt-23.04_b202306012030-mediatek-mt7622.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-mediatek-filogic
      id: asset-3b7679f14c99fd5797b741bae6f6b933
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-mediatek-filogic.zip
        asset_name: x-wrt-23.04_b202306012030-mediatek-filogic.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq807x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq807x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ipq807x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ipq807x-generic
      id: asset-820fb9ae29162314bce9547bbf8e8fb8
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ipq807x-generic.zip
        asset_name: x-wrt-23.04_b202306012030-ipq807x-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm27xx-bcm2711:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm27xx-bcm2711" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm27xx-bcm2711
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-bcm27xx-bcm2711
      id: asset-27996c63fba6d7eb41879473ff34bad3
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-bcm27xx-bcm2711.zip
        asset_name: x-wrt-23.04_b202306012030-bcm27xx-bcm2711.zip
        asset_content_type: application/zip
        overwrite: true
  build-bcm53xx-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="bcm53xx-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-bcm53xx-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-bcm53xx-generic
      id: asset-e5e26916c5f5a634b5830356df779f46
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-bcm53xx-generic.zip
        asset_name: x-wrt-23.04_b202306012030-bcm53xx-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-ipq806x-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ipq806x-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ipq806x-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ipq806x-generic
      id: asset-a4fde2734807babea4660d792c026546
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ipq806x-generic.zip
        asset_name: x-wrt-23.04_b202306012030-ipq806x-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-kirkwood-generic:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="kirkwood-generic" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-kirkwood-generic
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-kirkwood-generic
      id: asset-dfbc49bed57481a4e26c41f730ce5e0b
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-kirkwood-generic.zip
        asset_name: x-wrt-23.04_b202306012030-kirkwood-generic.zip
        asset_content_type: application/zip
        overwrite: true
  build-mvebu-cortexa9:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="mvebu-cortexa9" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-mvebu-cortexa9
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-mvebu-cortexa9
      id: asset-57480d34b2e8ea24a42d4f53979fb55c
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-mvebu-cortexa9.zip
        asset_name: x-wrt-23.04_b202306012030-mvebu-cortexa9.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7620_ramips-mt7620-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7620 ramips-mt7620-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt7620_ramips-mt7620-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt7620
      id: asset-54895889b74578551a8095229342e500
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt7620.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt7620.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt7620-nosymbol
      id: asset-2ef532ff6e91ec1232fa979b6900b3f4
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt7620-nosymbol.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt7620-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt7621_ramips-mt7621-ext4fs:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt7621 ramips-mt7621-ext4fs" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt7621_ramips-mt7621-ext4fs
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt7621
      id: asset-f09b8d143d549ecd706c3cc354e57340
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt7621.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt7621.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt7621-ext4fs
      id: asset-8bb9418e15fb18afa01b71f8dabddca1
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt7621-ext4fs.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt7621-ext4fs.zip
        asset_content_type: application/zip
        overwrite: true
  build-ramips-mt76x8_ramips-mt76x8-nosymbol:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="ramips-mt76x8 ramips-mt76x8-nosymbol" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-ramips-mt76x8_ramips-mt76x8-nosymbol
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt76x8
      id: asset-ebf940e83e5e234fdfc6527f5da49c42
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt76x8.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt76x8.zip
        asset_content_type: application/zip
        overwrite: true
    - name: Upload Release Asset x-wrt-23.04_b202306012030-ramips-mt76x8-nosymbol
      id: asset-20827c655ab2c7badce80cba733d5876
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-ramips-mt76x8-nosymbol.zip
        asset_name: x-wrt-23.04_b202306012030-ramips-mt76x8-nosymbol.zip
        asset_content_type: application/zip
        overwrite: true
  build-rockchip-armv8:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="rockchip-armv8" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-rockchip-armv8
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-rockchip-armv8
      id: asset-26d72f695eaf78232aa45e52e0874143
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-rockchip-armv8.zip
        asset_name: x-wrt-23.04_b202306012030-rockchip-armv8.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-x86_64
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-x86_64
      id: asset-9b958721f824a467e0382cbe20af6aec
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-x86_64.zip
        asset_name: x-wrt-23.04_b202306012030-x86_64.zip
        asset_content_type: application/zip
        overwrite: true
  build-x86_64-docker:
    if: contains(github.ref, 'tags/v')
    needs: release
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler tzdata
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      run: git clone --depth 1 --branch `cat release.tag` https://github.com/x-wrt/x-wrt.git
    - name: Update feeds
      run: cd x-wrt && ./scripts/feeds update -a
    - name: Install feeds
      run: cd x-wrt && ./scripts/feeds install -a
    - name: Building
      run: |
        cp *.sh x-wrt/
        cp release.tag x-wrt/
        cd x-wrt
        echo -e "$(nproc) thread build."
        BTARGET="x86_64-docker" sh build.sh $(nproc)
    - name : Upload make.log if failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-failure-log-x86_64-docker
        path: make.log
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v3
      with:
        name: release_url
        path: release_url
    - name: Get Release Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt || cat release_url.txt`
        echo "upload_url=$value" >> $GITHUB_OUTPUT
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
    - name: Upload Release Asset x-wrt-23.04_b202306012030-x86_64-docker
      id: asset-47e2a17ce1a1400d96300bd6d2caf784
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        github_token: ${{ secrets.WORKFLOW_TOKEN }}
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./x-wrt/x-wrt-23.04_b202306012030-x86_64-docker.zip
        asset_name: x-wrt-23.04_b202306012030-x86_64-docker.zip
        asset_content_type: application/zip
        overwrite: true
